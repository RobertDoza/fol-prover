%{

#include <iostream>
#include <memory>
#include <fstream>
#include "formula.hpp"
#include "quantifier.hpp"
#include "connective.hpp"
#include "atom.hpp"
#include "term.hpp"

extern int yylex();

void yyerror(const char* s);

std::shared_ptr<Formula> parsed_formula;
std::shared_ptr<Term> parsed_term;

extern FILE* yyin;

%}

%union {
	char *str;
	Term *term;
	std::vector<std::shared_ptr<Term>> *term_vec;
	AtomicFormula *atomic_formula;
	Formula *formula;
}

%token TRUE
%token FALSE
%token <str> SYMBOL
%token <str> VAR
%token NOT
%token AND
%token OR
%token IMPLIES
%token IFF
%token FORALL
%token EXISTS
%token OPTION_TERM
%token OPTION_FORMULA

%type <term> term
%type <term_vec> term_list
%type <atomic_formula> atomic_formula
%type <formula> formula
%type <formula> quantified_formula
%type <formula> connective
%type <formula> implication
%type <formula> disjunction
%type <formula> conjunction
%type <formula> equivalence
%type <formula> negation
%type <formula> subformula

%%

input:
	OPTION_FORMULA formula {
		std::shared_ptr<Formula> f($2);
		
		parsed_formula = f;
	}
	| OPTION_TERM term {
		std::shared_ptr<Term> t($2);
		
		parsed_term = t;
	}
	;

formula:
	quantified_formula {
		$$ = $1;
	}
	;

quantified_formula:
	FORALL VAR '.' quantified_formula {
		$$ = new ForAll( $2, std::shared_ptr<Formula>($4) );
	}
	| EXISTS VAR '.' quantified_formula {
		$$ = new Exists( $2, std::shared_ptr<Formula>($4) );
	}
	| connective {
		$$ = $1;
	}
	;

connective:
	implication {
		$$ = $1;
	}
	;

implication:
	disjunction IMPLIES implication {
		$$ = new Implication( std::shared_ptr<Formula>($1), std::shared_ptr<Formula>($3) );
	}
	| disjunction {
		$$ = $1;
	}
	;

disjunction:
	conjunction OR disjunction {
		$$ = new Disjunction( std::shared_ptr<Formula>($1), std::shared_ptr<Formula>($3) );
	}
	| conjunction {
		$$ = $1;
	}
	;

conjunction:
	equivalence AND conjunction {
		$$ = new Conjunction( std::shared_ptr<Formula>($1), std::shared_ptr<Formula>($3) );
	}
	| equivalence {
		$$ = $1;
	}
	;

equivalence:
	equivalence IFF negation {
		$$ = new Equivalence( std::shared_ptr<Formula>($1), std::shared_ptr<Formula>($3) );
	}
	| negation {
		$$ = $1;
	}
	;

negation:
	NOT negation {
		$$ = new Negation( std::shared_ptr<Formula>($2) );
	}
	| subformula {
		$$ = $1;
	}
	;

subformula:
	atomic_formula {
		$$ = $1;
	}
	| '(' formula ')' {
		$$ = $2;
	}
	;

atomic_formula:
	TRUE {
		$$ = new True();
	}
	| FALSE {
		$$ = new False();
	}
	| SYMBOL {
		$$ = new SimpleAtom($1);
	}
	| SYMBOL '(' term_list ')' {
		$$ = new ComplexAtom($1, *$3);
	}
	;

term:
	SYMBOL {
		$$ = new Constant($1);
	}
	| VAR {
		$$ = new Variable($1);
	}
	| SYMBOL '(' term_list ')' {
		$$ = new ComplexTerm($1, *$3);
	}
	;

term_list:
	term {
		$$ = new std::vector<std::shared_ptr<Term>>{ std::shared_ptr<Term>($1) };
	}
	| term ',' term_list {
		$3->insert($3->begin(), std::shared_ptr<Term>($1));
		$$ = $3;
	}
	;

%%

void yyerror(const char* s) {
    std::cerr << "Error: " << s << std::endl;
}

std::shared_ptr<Formula> parse_formula() {
	std::string input;
	std::getline(std::cin, input);
	input = "_FORMULA " + input;
	
	yyin = fmemopen((void*)input.c_str(), input.size(), "r");
	
	int parse_result = yyparse();
	
	fclose(yyin);
	
	if (parse_result != 0 || !parsed_formula) {
		throw std::runtime_error("Formula not parsed correctly!");
	}
	
	return parsed_formula;
}

std::shared_ptr<Term> parse_term() {
	std::string input;
	std::getline(std::cin, input);
	input = "_TERM " + input;
	
	yyin = fmemopen((void*)input.c_str(), input.size(), "r");
	
	int parse_result = yyparse();
	
	fclose(yyin);
	
	if (parse_result != 0 || !parsed_term) {
		throw std::runtime_error("Term not parsed correctly!");
	}
	
	return parsed_term;
}

std::shared_ptr<Formula> parse_formula(const std::string& filename) {
	std::ifstream file(filename);
	
	if (!file) {
		throw std::runtime_error("Error opening file: " + filename);
	}
	
	std::string file_content((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());
	
	std::string input = "_FORMULA " + file_content;
	
	yyin = fmemopen((void*)input.c_str(), input.size(), "r");
	
	int parse_result = yyparse();
	
	fclose(yyin);
	
	if (parse_result != 0 || !parsed_formula) {
		throw std::runtime_error("Formula not parsed correctly in file: " + filename);
	}
	
	return parsed_formula;
}

std::shared_ptr<Term> parse_term(const std::string& filename) {
	std::ifstream file(filename);
	
	if (!file) {
		throw std::runtime_error("Error opening file: " + filename);
	}
	
	std::string file_content((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());
	
	std::string input = "_TERM " + file_content;
	
	yyin = fmemopen((void*)input.c_str(), input.size(), "r");
	
	int parse_result = yyparse();
	
	fclose(yyin);
	
	if (parse_result != 0 || !parsed_term) {
		throw std::runtime_error("Term not parsed correctly in file: " + filename);
	}
	
	return parsed_term;
}

