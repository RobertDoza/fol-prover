%{

#include <iostream>
#include <memory>
#include "term.hpp"
#include "atom.hpp"

extern int yylex();

void yyerror(const char* s);

%}

%union {
	char *str;
	Term *term;
	std::vector<std::shared_ptr<Term>> *term_vec;
	AtomicFormula *atomic_formula;
}

%token TRUE
%token FALSE
%token <str> SYMBOL
%token <str> VAR
%token NOT
%token AND
%token OR
%token IMPLIES
%token IFF
%token FORALL
%token EXISTS

%type <term> term
%type <term_vec> term_list
%type <atomic_formula> atomic_formula

%%

input:
	| input atomic_formula {
		std::cout << "Found atomic formula: " << $2->to_string() << std::endl;
	}
	;

atomic_formula:
	TRUE {
		$$ = new True();
	}
	| FALSE {
		$$ = new False();
	}
	| SYMBOL {
		$$ = new SimpleAtom($1);
	}
	| SYMBOL '(' term_list ')' {
		$$ = new ComplexAtom($1, *$3);
	}
	;

term:
	SYMBOL {
		$$ = new Constant($1);
	}
	| VAR {
		$$ = new Variable($1);
	}
	| SYMBOL '(' term_list ')' {
		$$ = new ComplexTerm($1, *$3);
	}
	;

term_list:
	term {
		$$ = new std::vector<std::shared_ptr<Term>>{ std::shared_ptr<Term>($1) };
	}
	| term ',' term_list {
		$3->insert($3->begin(), std::shared_ptr<Term>($1));
		$$ = $3;
	}
	;

%%

void yyerror(const char* s) {
    std::cerr << "Error: " << s << std::endl;
}

